name: Terraform Workflow

on:
  workflow_dispatch:
  
jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli

      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.AccessKeyId' --output text)
          export AWS_SECRET_ACCESS_KEY=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SecretAccessKey' --output text)
          export AWS_SESSION_TOKEN=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SessionToken' --output text)
          aws sts get-caller-identity

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    outputs:
      tf_workspace: .terraform/

  build:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli

      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.AccessKeyId' --output text)
          export AWS_SECRET_ACCESS_KEY=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SecretAccessKey' --output text)
          export AWS_SESSION_TOKEN=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SessionToken' --output text)
          aws sts get-caller-identity
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
          export KUBE_CONFIG_PATH=/root/.kube/config

      - name: Terraform Plan
        run: terraform plan -out "planfile"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli

      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.AccessKeyId' --output text)
          export AWS_SECRET_ACCESS_KEY=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SecretAccessKey' --output text)
          export AWS_SESSION_TOKEN=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SessionToken' --output text)
          aws sts get-caller-identity
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
          export KUBE_CONFIG_PATH=/root/.kube/config

      - name: Terraform Apply
        run: terraform apply -input=false "planfile"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli

      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.AccessKeyId' --output text)
          export AWS_SECRET_ACCESS_KEY=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SecretAccessKey' --output text)
          export AWS_SESSION_TOKEN=$(aws sts assume-role-with-web-identity --role-arn ${{ secrets.ROLE_ARN }} --role-session-name "GitHubActions-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.SessionToken' --output text)
          aws sts get-caller-identity
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
          export KUBE_CONFIG_PATH=/root/.kube/config

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ github.event_name == 'workflow_dispatch' }}
